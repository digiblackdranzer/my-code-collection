import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    public static void main(String[] args) throws Exception{
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine());
        StringTokenizer st;
        HashMap<Integer,List<Integer>> al;
        while(t--!=0)
        {
            al = new HashMap<Integer,List<Integer>>();
            st = new StringTokenizer(br.readLine());
            int n = Integer.parseInt(st.nextToken());
            int m = Integer.parseInt(st.nextToken());
            long[] dist = new long[n];
            boolean[] visited = new boolean[n];
            for(int i=0;i<n;i++)
            {
                dist[i]=-1;    
                visited[i]=false;
            }
            for(int i=0;i<n;i++)
            al.put(i,new ArrayList<Integer>());
                
            for(int i=0;i<m;i++)
            {
                st = new StringTokenizer(br.readLine());
                int s = Integer.parseInt(st.nextToken())-1;
                int d = Integer.parseInt(st.nextToken())-1;
                ArrayList<Integer> tmp = new ArrayList<Integer>(al.get(s));
                tmp.add(d);
                al.put(s,tmp);
                tmp = new ArrayList<Integer>(al.get(d));
                tmp.add(s);
                al.put(d,tmp);
            }    
            
           
            int s = Integer.parseInt(br.readLine().trim())-1;
            LinkedList<Integer> stack = new LinkedList<Integer>();
            stack.add(s);
            visited[s]=true;
            dist[s]=0;
            while(!stack.isEmpty())
            {
                int popper = stack.pop();
                LinkedList<Integer> tmp = new LinkedList<Integer>();
                tmp.addAll(al.get(popper));
                for(Integer i : tmp)
                {
                    if(!visited[i])
                    {
                        dist[i] = dist[popper]+6;
                        visited[i]=true;
                        stack.add(i);
                    }
                }
                
            }    
            
            for(int i=0;i<n;i++)
            {
                if(i!=s)
                System.out.print(dist[i]+" ");    
            }    
            System.out.println();
        }    
    }
    
}
   




